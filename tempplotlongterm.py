""" tempplot.py """
"""
Author: A.C. DeHart
Environnment: Python 2.7
Comment: Similar to tempplot.py, this script navigates to a directory containing our temperature data files generated by our R-Pi unit, converts the data points to corresponding temperatures for our hardware and displays a plot of the results. However, this script looks at several days worth of data and has different plotting beautification to correspond to the changes.
"""

import os
import pandas as pd  
import matplotlib.pyplot as plt
import matplotlib.dates as md
import matplotlib
import time
from matplotlib.dates import DateFormatter
from matplotlib.dates import MinuteLocator
import numpy as np

os.chdir('./temperature_data')

data_path = ['./temp_2017_11_14.txt','./temp_2017_11_15.txt','./temp_2017_11_16.txt','./temp_2017_11_17.txt','./temp_2017_11_18.txt','./temp_2017_11_19.txt','./temp_2017_11_20.txt','./temp_2017_11_21.txt','./temp_2017_11_22.txt','./temp_2017_11_23.txt','./temp_2017_11_24.txt','./temp_2017_11_25.txt','./temp_2017_11_26.txt','./temp_2017_11_27.txt','./temp_2017_11_28.txt','./temp_2017_11_29.txt','./temp_2017_11_30.txt']


data = pd.DataFrame([])
for item in data_path:
    data_temp = pd.read_csv(item, sep = " ", engine='python', header=None)  #Parsing file        
    data_temp.columns = ['Date', 'Time1', 'Time2', 'ULE Temp', 'Room Temp', 'Resistor', 'Blank1', 'Blank2', 'Blank3', 'Blank4', 'Blank5']
    if not len(data):
        data = data_temp
    else:
        data = data.append(data_temp,ignore_index=True)

#data.columns = ['Date', 'Time1', 'Time2', 'ULE Temp', 'Room Temp', 'Resistor', 'Blank1', 'Blank2', 'Blank3', 'Blank4', 'Blank5']
#print(data.head())


#print(data["Time1"].values)
B = 3974.0
B_prime = 3892.0

data['ULE Temp'] = data['ULE Temp'].astype(float)
data['Room Temp'] = data['Room Temp'].astype(float)

data['Time1'] = [str(item.split(":")[0])+":"+str(item.split(":")[1]) for item in data["Time1"].values]

rawtemp = data['ULE Temp'].values
abstemp = [x*(B_prime/B) for x in rawtemp]
data['ULE Temp'] = abstemp

rawtemp = data['Room Temp'].values
abstemp = [x*(B_prime/B) for x in rawtemp]
data['Room Temp'] = abstemp


data = data[-1440::]
print(len(data))
print(np.std(data['ULE Temp'].values))

#data['ULE Temp'] = data['ULE Temp'].apply(lambda x: x*(B_prime/B))
"""
data_path = './temp_2017_11_15.txt'
data2 = pd.read_csv(data_path, sep = " ", engine='python', header=None)  #Parsing file
data2.columns = ['Date', 'Time1', 'Time2', 'ULE Temp', 'Room Temp', 'Resistor', 'Blank1', 'Blank2', 'Blank3', 'Blank4', 'Blank5']
print(data.head())

data['ULE Temp'] = data['ULE Temp'].apply(lambda x: x*(B_prime/B))
data['Room Temp'] = data['Room Temp'].apply(lambda x: x*(B_prime/B))
data2['ULE Temp'] = data2['ULE Temp'].apply(lambda x: x*(B_prime/B))
data2['Room Temp'] = data2['Room Temp'].apply(lambda x: x*(B_prime/B))


#ax = data.plot(legend = False)
ax = data.plot(x = 'Time1', y = 'ULE Temp')
plt.ylim([24.8,25.8])
plt.ylabel('Temp [C]')
plt.xlabel('Time on 13-Nov-2017')
plt.title('ULE Temperature on Day of Temp Change')
plt.show(block=False);


ax = data.plot(x = 'Time1', y = 'Room Temp')
plt.ylabel('Temp [C]')
plt.xlabel('Time on 13-Nov-2017')
plt.title('Room Temperature')
plt.show(block=False);

ax = data2.plot(x = 'Time1', y = 'ULE Temp')
plt.ylim([25.0,25.06])
plt.ylabel('Temp [C]')
plt.xlabel('Time on 15-Nov-2017')
plt.title('ULE Temperature After Temmp Change')
plt.show(block=False);
"""
#ax=plt.subplot()

data['Time2'] = [float(float(index - data['Time2'].iloc[0])/3600.0) for index in data['Time2'].values]
print(data['Time2'].values)
data['Time3'] = md.epoch2num(data['Time2'].values)

ax = data.plot(x = 'Time2', y = 'ULE Temp', marker = 'o')
y_formatter = matplotlib.ticker.ScalarFormatter(useOffset=False)
ax.yaxis.set_major_formatter(y_formatter)

#ax.xaxis.set_major_locator(MinuteLocator())
#ax.xaxis.set_major_formatter(DateFormatter('%H:%M'))

#plt.xticklabel_format(useOffset=False)
#plt.ylim([25.02,25.04])
#plt.xlim([1510746065, 1510749666])

plt.ylabel('Temp [C]')

plt.xlabel('Time [Hours]')
plt.title('One Day of ULE Temperature Data')
#ax = data.plot(x = 'Time1', y = 'ULE Temp')

date_fmt = '%d-%m'
date_formatter = md.DateFormatter(date_fmt)
#ax.xaxis.set_major_formatter(date_formatter)

plt.show(block=False);


raw_input("Hit Return\n")
